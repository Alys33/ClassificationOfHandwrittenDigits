type: edu
files:
- name: analysis.py
  visible: true
  text: |
    import tensorflow as tf
    import numpy as np
    (X_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
    X = np.concatenate((X_train, x_test))[:6000]
    y= np.concatenate((y_train, y_test))[:6000]

    # reshaping of flatting  the features matrix
    X = X.reshape(X.shape[0], X.shape[1] ** 2)


    # print(f"Classes: {np.unique(y_train)}")
    # print(f"Features' shape: {x_train.shape}")
    # print(f"Target's shape: {y_train.shape}")
    # print(f"min: {x_train.min()}, max: {x_train.max()}")

    from sklearn.model_selection import train_test_split
    import pandas as pd

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)

    df = pd.Series(y_train)
    prop = df.value_counts(normalize=True)

    print(f'x_train shape: {X_train.shape}')
    print(f'x_test shape: {X_test.shape}')
    print(f'y_train shape: {y_train.shape}')
    print(f'y_test shape: {y_test.shape}')
    print("Proportion of samples per class in train set:")
    print(prop)
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re


    class CCATest(StageTest):

        def generate(self):
            return [TestCase(time_limit=1800000)]

        def check(self, reply, attach):
            lines = reply.split('\n')
            if "" in lines:
                lines = list(filter(lambda a: a != "", lines))

            # general
            lines2check = []

            for item in lines:
                if any(key_word in item.replace(" ", "").lower() for key_word in ['k-nearest', 'forestalgorithm', 'accuracy']):
                    lines2check.append(item)

            if len(lines2check) != 4:
                return CheckResult.wrong(
                    feedback='Something is wrong with the output format, check the example output at the stage 5')

            # k-nearest neighbours classifier
            algorithm_name_reply = lines2check[0]
            accuracy_reply = re.findall(r'\d*\.\d+|\d+', lines2check[1])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback='It should be one number in the "accuracy:" section')

            if not 0.957 <= float(accuracy_reply[0]) < 1:
                return CheckResult.wrong(
                    feedback=f"The accuracy for {algorithm_name_reply} is wrong")

            # random forest classifier
            algorithm_name_reply = lines2check[2]
            accuracy_reply = re.findall(r'\d*\.\d+|\d+', lines2check[3])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback='It should be one number in the "accuracy:" section')

            if not 0.945 <= float(accuracy_reply[0]) < 1:
                return CheckResult.wrong(
                    feedback=f"The accuracy for {algorithm_name_reply} is wrong")
            return CheckResult.correct()


    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15237#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 30 Oct 2022 10:56:00 UTC
record: -1
